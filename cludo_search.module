<?php

/**
 * @file
 * Cludo search module enables searching via a dedicated cludo Search search.
 *
 * See README.txt and the help page at admin/help/cludo_search.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;

/**
 * Default module settings.
 */
define('CLUDO_SEARCH_DEFAULT_CUSTOMERID', 'default_customerId');
define('CLUDO_SEARCH_DEFAULT_ENGINEID', 'default_engineId');
define('CLUDO_SEARCH_DEFAULT_SEARCH_PAGE', 'csearch');
define('CLUDO_SEARCH_DEFAULT_DISABLE_AUTOCOMPLETE', FALSE);
define('CLUDO_SEARCH_DEFAULT_HIDE_RESULTS_COUNT', FALSE);
define('CLUDO_SEARCH_DEFAULT_HIDE_DID_YOU_MEAN', FALSE);
define('CLUDO_SEARCH_DEFAULT_HIDE_SEARCH_FILTERS', FALSE);

/**
 * Minimize redundant trips to the db when looking for module settings.
 *
 * Hooks that change module settings should run this function with
 * $refresh = TRUE so other hooks can just get settings without a db
 * query.
 */
function _cludo_search_get_settings($refresh = FALSE) {

  $settings = &drupal_static(__FUNCTION__, NULL, $refresh);

  if (!isset($settings)) {
    $field_keys = _cludo_search_get_field_keys();

    // Get cludo_search config.
    $config = \Drupal::configFactory()->get('cludo_search.settings');

    // Settings fall back to default constants.
    foreach ($field_keys as $field) {
      $field_value = $config->get($field);
      $settings[$field] = !empty($field_value) ? $field_value : constant('CLUDO_SEARCH_DEFAULT_' . strtoupper($field));
    }
  }

  return $settings;
}

/**
 * Implements hook_features_api().
 */
function cludo_search_features_api() {
  return [
    'cludo_search_profile' => [
      'name' => t('Config for Cludo search'),
      'file' => drupal_get_path('module', 'cludo_search') . '/cludo_search.features.inc',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'default_hook' => 'cludo_search_defaults',
      'feature_source' => TRUE,
    ],
  ];
}

/**
 * Implements hook_help().
 */
function cludo_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cludo_search':
      $output = '';
      $output .= '<h2>' . t('About') . '</h2>' . PHP_EOL;
      $output .= '<p>' . t('The cludo search module provides a search form.') . '</p>' . PHP_EOL;
      $output .= '<p>' . t('If you will use core search along with this module, core search results will show up normally at <code>search/{search terms}</code>, while Cludo Search searches will show up at <code>csearch/{search terms}</code>.') . '</p>' . PHP_EOL;
      $output .= '<h2>' . t('Blocks') . '</h2>';
      $output .= '<p>' . t('The module provides:') . '</p>' . PHP_EOL;
      $output .= '<ol><li>' . t('the block search form') . '</li>' . PHP_EOL;
      $output .= '<p>' . t('Both can be enabled and configured on the <a href="@blocks-admin">Blocks administration page</a>. The block search form provides a search form that can be placed into any block.', ['@blocks-admin' => url('admin/structure/block')]) . '</p>';

      return $output;

    case 'admin/config/cludo_search/settings':
      $output = '<p>' . t('The Cludo Search account settings . Visit <a href="@CS-help">Cludo Search help section</a> for more information on setting up the integration.', ['@CS-help' => url('admin/help/cludo_search')]) . '</p>';

      return $output;
  }
}

/**
 * Returns field keys.
 *
 * @return array
 *   An array of all the variables.
 */
function _cludo_search_get_field_keys() {
  return [
    'customerId',
    'engineId',
    'search_page',
    'disable_autocomplete',
    'hide_results_count',
    'hide_did_you_mean',
    'hide_search_filters',
  ];
}

/**
 * Implements hook_theme().
 */
function cludo_search_theme() {

  $registry = [];
  $ca_template_dir = drupal_get_path('module', 'cludo_search') . '/templates';

  // Full search form on results pages.
  $registry['cludo_search_search_form'] = [
    'arguments' => ['form' => NULL],
    'render element' => 'form',
    'template' => 'cludo-search-search-form',
    'path' => $ca_template_dir,
  ];

  // Block search form.
  $registry['cludo_search_block_form'] = [
    'render element' => 'form',
    'template' => 'cludo-search-block-form',
    'path' => $ca_template_dir,
  ];

  // Results page (top level template for the rest).
  $registry['cludo_search_results'] = [
    'variables' => [
      'search_query_data' => NULL,
      'response_data' => NULL,
      'synonyms_label' => t('You might also try:'),
    ],
    'template' => 'cludo-search-results',
    'path' => $ca_template_dir,
  ];

  // Single result within the results page.
  $registry['cludo_search_result'] = [
    'variables' => ['result_data' => NULL],
    'template' => 'cludo-search-result',
    'path' => $ca_template_dir,
  ];

  return $registry;
}

/**
 * Preprocess a single search result.
 */
function template_preprocess_cludo_search_result(&$vars) {

  // If the result has a mime type value, generate file icon image
  // that themes can optionally display
  // below includes patch: cludo_search-file_icon_alt-2598486-1.patch.
  if ($vars['mime']['type'] != '') {
    $file = new stdClass();
    $file->filemime = $vars['mime']['type'];
    $vars['mime']['icon'] = [
      'file' => $file,
      'alt' => $vars['mime']['type'],
    ];
  }

  // Sanitise snippet and title.
  // Allow boldface through for keywork highlighting.
  $vars['snippet'] = Xss::filter($vars['snippet'], ['b', 'strong']);
  $vars['title'] = Xss::filter($vars['title'], ['b', 'strong']);

  // Sanitize crawl date.
  if (!empty($vars['crawl_date'])) {
    $vars['crawl_date'] = Html::escape($vars['crawl_date']);
  }

  // Add a cludo-search-levelx class if we're sub-levels.
  if ((int) $vars['level'] > 1) {
    $vars['classes_array'][] = 'cludo-search-level' . $vars['level'];
  }
}
